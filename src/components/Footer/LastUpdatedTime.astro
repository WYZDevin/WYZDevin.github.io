---
import request from 'graphql-request'
import { GetRepoInfo } from '@/lib/graphql'
import { formatDateByTimeZone } from '@/lib/utils'
import type { GithubRepositoryLastUpdated } from '@/types'

interface Props {
  class?: string
}

// Fetch repo info at build time
const getLastUpdatedTime = async (
  owner: string,
  repository: string
): Promise<GithubRepositoryLastUpdated> => {
  const response = await request({
    url: 'https://api.github.com/graphql',
    document: GetRepoInfo,
    variables: { username: owner, repositoryName: repository },
    requestHeaders: {
      Authorization: `Bearer ${import.meta.env.PUBLIC_ACCESS_TOKEN}`
    }
  })
  return (response as any).repository
}

let data = null
try {
  data = await getLastUpdatedTime('WYZDevin', 'WYZDevin.github.io')
} catch (error) {
  console.error('Failed to fetch repo info:', error)
}

if (!data) return

const date = new Date(data.pushedAt)
const formattedDate = formatDateByTimeZone(date)
const { class: className } = Astro.props
---

{
  data ? (
    <p class:list={['text-xs min-[961px]:self-end', className]}>
      Last updated by Devin <br class='xs:hidden' /> on {formattedDate} UTC+7
    </p>
  ) : (
    // TODO: handle error
    <p>Something went wrong ðŸ˜”</p>
  )
}
