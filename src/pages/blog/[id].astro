---
import type { GetStaticPaths } from 'astro'
import { getCollection, render } from 'astro:content'
import readingTime from 'reading-time'

import ContentWrapper from '@/components/ContentWrapper.astro'
import BlogLayout from '@/layouts/BlogLayout'

interface LastUpdatedTimeData {
  lastUpdatedTime: string
  latestCommitUrl: string
}

// Fetch last updated time at build time
const getLastUpdatedTimeByFile = async (
  filePath: string
): Promise<LastUpdatedTimeData> => {
  const API_URL = `https://api.github.com/repos/WYZDevin/WYZDevin.github.io/commits?`

  const params = new URLSearchParams({
    path: `src/content/${filePath}`,
    per_page: '1'
  }).toString()

  const response = await fetch(API_URL + params, {
    headers: { Authorization: `Bearer ${import.meta.env.PUBLIC_ACCESS_TOKEN}` }
  })

  const [data] = await response.json()

  return {
    lastUpdatedTime: data.commit.committer.date,
    latestCommitUrl: data.html_url
  }
}

export const getStaticPaths = (async () => {
  const blogEntries = await getCollection('blog')

  return blogEntries.map((entry) => {
    return {
      params: { id: entry.id },
      props: { entry }
    }
  })
}) satisfies GetStaticPaths

const { entry } = Astro.props
const { Content, headings } = await render(entry)

let latestCommitUrl = ''
let lastUpdatedTime = ''

try {
  const data = await getLastUpdatedTimeByFile(`blog/${entry.id}.mdx`)
  latestCommitUrl = data.latestCommitUrl
  lastUpdatedTime = data.lastUpdatedTime
} catch (error) {
  console.error('Failed to fetch last updated time:', error)
}

const { minutes } = readingTime(entry.body!)
---

<BlogLayout
  headings={headings}
  id={entry.id}
  updatedDate={new Date(lastUpdatedTime)}
  latestCommitUrl={latestCommitUrl}
  readingTime={Math.ceil(minutes)}
  {...entry.data}
>
  <ContentWrapper content={Content} />
</BlogLayout>
