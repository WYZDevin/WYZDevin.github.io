---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import { getCollection, render } from 'astro:content'
import readingTime from 'reading-time'
import type { BreadcrumbList, WithContext } from 'schema-dts'

import ContentWrapper from '@/components/ContentWrapper.astro'
import ProjectLayout from '@/layouts/ProjectLayout'
import { getProjectSchema, projectWebsite } from '@/lib/structuredData'

interface Props extends InferGetStaticPropsType<typeof getStaticPaths> {}

interface LastUpdatedTimeData {
  lastUpdatedTime: string
  latestCommitUrl: string
}

// Fetch last updated time at build time
const getLastUpdatedTimeByFile = async (
  filePath: string
): Promise<LastUpdatedTimeData> => {
  const API_URL = `https://api.github.com/repos/WYZDevin/WYZDevin.github.io/commits?`

  const params = new URLSearchParams({
    path: `src/content/${filePath}`,
    per_page: '1'
  }).toString()

  const response = await fetch(API_URL + params, {
    headers: { Authorization: `Bearer ${import.meta.env.PUBLIC_ACCESS_TOKEN}` }
  })

  const [data] = await response.json()

  return {
    lastUpdatedTime: data.commit.committer.date,
    latestCommitUrl: data.html_url
  }
}

export const getStaticPaths = (async () => {
  const projectEntries = await getCollection('projects')

  return projectEntries.map((entry) => ({
    params: { id: entry.id },
    props: { entry }
  }))
}) satisfies GetStaticPaths

const { entry } = Astro.props
const { Content, headings } = await render(entry)

let latestCommitUrl = ''
let lastUpdatedTime = ''

try {
  const data = await getLastUpdatedTimeByFile(`projects/${entry.id}.mdx`)
  latestCommitUrl = data.latestCommitUrl
  lastUpdatedTime = data.lastUpdatedTime
} catch (error) {
  console.error('Failed to fetch last updated time:', error)
}

const { minutes, words } = readingTime(entry.body!)

const projectStructuredData = getProjectSchema(entry)

const breadcrumbsStructuredData: WithContext<BreadcrumbList> = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  itemListElement: [
    {
      '@type': 'ListItem',
      position: 1,
      name: 'Projects',
      item: `${import.meta.env.SITE}/projects/`
    },
    {
      '@type': 'ListItem',
      position: 2,
      name: entry.data.title,
      item: `${import.meta.env.SITE}/projects/${entry.id}/`
    }
  ]
}

const jsonLd = {
  '@context': 'https://schema.org',
  '@graph': [projectStructuredData, breadcrumbsStructuredData, projectWebsite]
}
---

<ProjectLayout
  headings={headings}
  slug={entry.id}
  readingTime={Math.ceil(minutes)}
  wordsCount={words}
  updatedDate={new Date(lastUpdatedTime)}
  latestCommitUrl={latestCommitUrl}
  {...entry.data}
>
  <script
    is:inline
    type='application/ld+json'
    set:html={JSON.stringify(jsonLd)}
    slot='head'
  />
  <ContentWrapper content={Content} />
</ProjectLayout>
